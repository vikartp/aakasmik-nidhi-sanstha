import { useState } from 'react';

interface Question {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

interface TriviaQuestion {
  category: string;
  type: string;
  difficulty: string;
  question: string;
  correct_answer: string;
  incorrect_answers: string[];
}

const quizQuestions: Question[] = [
  {
    id: 1,
    question: "‡§Ü‡§ï‡§∏‡•ç‡§Æ‡§ø‡§ï ‡§®‡§ø‡§ß‡§ø ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
    options: [
      "‡§™‡•à‡§∏‡§æ ‡§ï‡§Æ‡§æ‡§®‡§æ",
      "‡§∏‡§Ç‡§ï‡§ü ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞‡§®‡§æ", 
      "‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§® ‡§ï‡§∞‡§®‡§æ",
      "‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞ ‡§ï‡§∞‡§®‡§æ"
    ],
    correctAnswer: 1,
    explanation: "‡§Ü‡§ï‡§∏‡•ç‡§Æ‡§ø‡§ï ‡§®‡§ø‡§ß‡§ø ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§ï‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§π‡•à‡•§"
  },
  {
    id: 2,
    question: "‡§è‡§ï‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∂‡§ï‡•ç‡§§‡§ø ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
    options: [
      "‡§Ö‡§ï‡•á‡§≤‡•á ‡§∞‡§π‡§®‡§æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•à",
      "‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§¨‡§°‡§º‡•á ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç",
      "‡§ù‡§ó‡§°‡§º‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è",
      "‡§∏‡§¨‡§∏‡•á ‡§Ö‡§≤‡§ó ‡§∞‡§π‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è"
    ],
    correctAnswer: 1,
    explanation: "‡§è‡§ï‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∂‡§ï‡•ç‡§§‡§ø ‡§ï‡§æ ‡§Ö‡§∞‡•ç‡§• ‡§π‡•à ‡§ï‡§ø ‡§ú‡§¨ ‡§≤‡•ã‡§ó ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§µ‡•á ‡§¨‡§°‡§º‡•Ä ‡§∏‡•á ‡§¨‡§°‡§º‡•Ä ‡§ö‡•Å‡§®‡•å‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§®‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§"
  },
  {
    id: 3,
    question: "‡§Æ‡§π‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§¶‡•á‡§®‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?",
    options: [
      "‡§∞‡•ã‡§ú",
      "‡§π‡§∞ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§è‡§ï ‡§¨‡§æ‡§∞",
      "‡§∏‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§¨‡§æ‡§∞",
      "‡§ú‡§¨ ‡§Æ‡§® ‡§ï‡§∞‡•á"
    ],
    correctAnswer: 1,
    explanation: "‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§π‡§∞ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§¶‡•á‡§®‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§"
  },
  {
    id: 4,
    question: "‡§∏‡§π‡§Ø‡•ã‡§ó ‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ ‡§∏‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§´‡§æ‡§Ø‡§¶‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?",
    options: [
      "‡§ï‡•ã‡§à ‡§´‡§æ‡§Ø‡§¶‡§æ ‡§®‡§π‡•Ä‡§Ç",
      "‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§¨‡§®‡§§‡§æ ‡§π‡•à",
      "‡§ù‡§ó‡§°‡§º‡•á ‡§¨‡§¢‡§º‡§§‡•á ‡§π‡•à‡§Ç",
      "‡§™‡•à‡§∏‡§æ ‡§¨‡§∞‡•ç‡§¨‡§æ‡§¶ ‡§π‡•ã‡§§‡§æ ‡§π‡•à"
    ],
    correctAnswer: 1,
    explanation: "‡§∏‡§π‡§Ø‡•ã‡§ó ‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ ‡§∏‡•á ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§¨‡§®‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§π‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§ï‡§†‡§ø‡§® ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§∞‡§æ ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à‡•§"
  },
  {
    id: 5,
    question: "‡§Ü‡§™‡§∏‡•Ä ‡§≠‡§æ‡§à‡§ö‡§æ‡§∞‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à?",
    options: [
      "‡§∏‡§Æ‡§Ø ‡§¨‡§∞‡•ç‡§¨‡§æ‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è",
      "‡§è‡§ï-‡§¶‡•Ç‡§∏‡§∞‡•á ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è",
      "‡§≤‡§°‡§º‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è",
      "‡§¶‡§ø‡§ñ‡§æ‡§µ‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è"
    ],
    correctAnswer: 1,
    explanation: "‡§Ü‡§™‡§∏‡•Ä ‡§≠‡§æ‡§à‡§ö‡§æ‡§∞‡§æ ‡§á‡§∏‡§≤‡§ø‡§è ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§á‡§∏‡§∏‡•á ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§è‡§ï-‡§¶‡•Ç‡§∏‡§∞‡•á ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•Ä ‡§≠‡§æ‡§µ‡§®‡§æ ‡§¨‡§®‡•Ä ‡§∞‡§π‡§§‡•Ä ‡§π‡•à‡•§"
  }
];

function CommunityQuiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [showExplanation, setShowExplanation] = useState(false);

  const handleAnswerSelect = (answerIndex: number) => {
    if (selectedAnswer !== null) return; // Prevent changing answer
    setSelectedAnswer(answerIndex);
    setShowExplanation(true);
    
    if (answerIndex === quizQuestions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }
  };

  const handleNextQuestion = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowExplanation(false);
    } else {
      setShowResult(true);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setScore(0);
    setShowResult(false);
    setShowExplanation(false);
  };

  const getScoreMessage = () => {
    const percentage = (score / quizQuestions.length) * 100;
    if (percentage >= 80) return "‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! üèÜ ‡§Ü‡§™ ‡§è‡§ï ‡§∏‡§ö‡•ç‡§ö‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§π‡•à‡§Ç!";
    if (percentage >= 60) return "‡§Ö‡§ö‡•ç‡§õ‡§æ! üëç ‡§Ü‡§™ ‡§∏‡§π‡•Ä ‡§∞‡§æ‡§π ‡§™‡§∞ ‡§π‡•à‡§Ç!";
    if (percentage >= 40) return "‡§†‡•Ä‡§ï ‡§π‡•à! üìö ‡§•‡•ã‡§°‡§º‡§æ ‡§î‡§∞ ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à!";
    return "‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡•á‡§Ç! üí™ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§∏‡•á ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§∏‡•Ä‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!";
  };

  const question = quizQuestions[currentQuestion];

  if (showResult) {
    return (
      <div className="w-full max-w-sm mx-auto mt-8 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20 rounded-xl shadow-lg border border-blue-200 dark:border-blue-800 p-4">
        <div className="text-center">
          <h2 className="text-lg font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent mb-4">
            üß† Quiz ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•ã ‡§ó‡§à!
          </h2>
          
          <div className="bg-white dark:bg-gray-800 rounded-lg p-4 mb-4 border border-gray-200 dark:border-gray-700">
            <div className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-2">
              {score} / {quizQuestions.length}
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-3">
              {((score / quizQuestions.length) * 100).toFixed(0)}% ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞
            </div>
            <div className="text-sm font-medium text-gray-700 dark:text-gray-300">
              {getScoreMessage()}
            </div>
          </div>

          <button
            onClick={resetQuiz}
            className="w-full py-3 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold rounded-lg transition-all transform hover:scale-105 touch-manipulation"
          >
            ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ñ‡•á‡§≤‡•á‡§Ç
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-sm mx-auto mt-8 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20 rounded-xl shadow-lg border border-blue-200 dark:border-blue-800 p-4">
      <div className="text-center mb-4">
        <h2 className="text-lg font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent mb-2">
          üß† ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§ú‡•ç‡§û‡§æ‡§® Quiz
        </h2>
        <div className="text-sm text-gray-600 dark:text-gray-400">
          ‡§™‡•ç‡§∞‡§∂‡•ç‡§® {currentQuestion + 1} / {quizQuestions.length}
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 mb-4 border border-gray-200 dark:border-gray-700">
        <h3 className="text-base font-semibold text-gray-800 dark:text-gray-200 mb-4 text-center leading-relaxed">
          {question.question}
        </h3>

        <div className="space-y-2">
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(index)}
              disabled={selectedAnswer !== null}
              className={`w-full p-3 text-left rounded-lg border transition-all touch-manipulation ${
                selectedAnswer === null
                  ? 'border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 hover:bg-blue-50 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300'
                  : selectedAnswer === index
                  ? index === question.correctAnswer
                    ? 'border-green-500 bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200'
                    : 'border-red-500 bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-200'
                  : index === question.correctAnswer
                  ? 'border-green-500 bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200'
                  : 'border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400'
              }`}
            >
              <span className="font-medium">{String.fromCharCode(65 + index)}.</span> {option}
            </button>
          ))}
        </div>

        {showExplanation && (
          <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/30 border border-blue-200 dark:border-blue-700 rounded-lg">
            <div className="text-sm text-blue-800 dark:text-blue-200 font-medium mb-1">
              ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ:
            </div>
            <div className="text-sm text-blue-700 dark:text-blue-300">
              {question.explanation}
            </div>
          </div>
        )}
      </div>

      {selectedAnswer !== null && (
        <button
          onClick={handleNextQuestion}
          className="w-full py-3 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold rounded-lg transition-all transform hover:scale-105 touch-manipulation"
        >
          {currentQuestion < quizQuestions.length - 1 ? '‡§Ö‡§ó‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®' : '‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç'}
        </button>
      )}
    </div>
  );
}

function TriviaQuiz() {
  const [triviaQuestions, setTriviaQuestions] = useState<TriviaQuestion[]>([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchTriviaQuestions = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('https://opentdb.com/api.php?amount=5&category=9&type=multiple');
      const data = await response.json();
      
      if (data.response_code === 0) {
        setTriviaQuestions(data.results);
        setCurrentQuestion(0);
        setSelectedAnswer(null);
        setScore(0);
        setShowResult(false);
      } else {
        setError('‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡•á‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§');
      }
    } catch (err) {
      console.log('Error fetching trivia questions:', err);
      setError('‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§');
    } finally {
      setLoading(false);
    }
  };

  const decodeHtml = (html: string) => {
    const txt = document.createElement('textarea');
    txt.innerHTML = html;
    return txt.value;
  };

  const shuffleArray = (array: string[]) => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };

  const getCurrentQuestionData = () => {
    if (triviaQuestions.length === 0) return null;
    
    const question = triviaQuestions[currentQuestion];
    const allOptions = [...question.incorrect_answers, question.correct_answer];
    const shuffledOptions = shuffleArray(allOptions);
    const correctIndex = shuffledOptions.indexOf(question.correct_answer);
    
    return {
      question: decodeHtml(question.question),
      options: shuffledOptions.map(option => decodeHtml(option)),
      correctAnswer: correctIndex,
      difficulty: question.difficulty,
      category: question.category
    };
  };

  const handleAnswerSelect = (answerIndex: number) => {
    if (selectedAnswer !== null) return;
    setSelectedAnswer(answerIndex);
    
    const questionData = getCurrentQuestionData();
    if (questionData && answerIndex === questionData.correctAnswer) {
      setScore(score + 1);
    }
  };

  const handleNextQuestion = () => {
    if (currentQuestion < triviaQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
    } else {
      setShowResult(true);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setScore(0);
    setShowResult(false);
    setTriviaQuestions([]);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'text-green-600 dark:text-green-400';
      case 'medium': return 'text-yellow-600 dark:text-yellow-400';
      case 'hard': return 'text-red-600 dark:text-red-400';
      default: return 'text-gray-600 dark:text-gray-400';
    }
  };

  const getScoreMessage = () => {
    const percentage = (score / triviaQuestions.length) * 100;
    if (percentage >= 80) return "‡§∂‡§æ‡§®‡§¶‡§æ‡§∞! üåü ‡§Ü‡§™ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§π‡•à‡§Ç!";
    if (percentage >= 60) return "‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! üéØ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§π‡•à!";
    if (percentage >= 40) return "‡§†‡•Ä‡§ï ‡§π‡•à! üìñ ‡§î‡§∞ ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à!";
    return "‡§ï‡•ã‡§à ‡§¨‡§æ‡§§ ‡§®‡§π‡•Ä‡§Ç! üí™ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§∏‡•á ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§∏‡•Ä‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!";
  };

  if (loading) {
    return (
      <div className="w-full max-w-sm mx-auto mt-6 bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-orange-900/20 dark:via-red-900/20 dark:to-pink-900/20 rounded-xl shadow-lg border border-orange-200 dark:border-orange-800 p-4">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full max-w-sm mx-auto mt-6 bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-orange-900/20 dark:via-red-900/20 dark:to-pink-900/20 rounded-xl shadow-lg border border-orange-200 dark:border-orange-800 p-4">
        <div className="text-center">
          <div className="text-red-600 dark:text-red-400 mb-4">{error}</div>
          <button
            onClick={fetchTriviaQuestions}
            className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors"
          >
            ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç
          </button>
        </div>
      </div>
    );
  }

  if (showResult) {
    return (
      <div className="w-full max-w-sm mx-auto mt-6 bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-orange-900/20 dark:via-red-900/20 dark:to-pink-900/20 rounded-xl shadow-lg border border-orange-200 dark:border-orange-800 p-4">
        <div className="text-center">
          <h2 className="text-lg font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent mb-4">
            üåç Trivia Quiz ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•ã ‡§ó‡§à!
          </h2>
          
          <div className="bg-white dark:bg-gray-800 rounded-lg p-4 mb-4 border border-gray-200 dark:border-gray-700">
            <div className="text-2xl font-bold text-orange-600 dark:text-orange-400 mb-2">
              {score} / {triviaQuestions.length}
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-400 mb-3">
              {((score / triviaQuestions.length) * 100).toFixed(0)}% ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞
            </div>
            <div className="text-sm font-medium text-gray-700 dark:text-gray-300">
              {getScoreMessage()}
            </div>
          </div>

          <div className="space-y-2">
            <button
              onClick={fetchTriviaQuestions}
              className="w-full py-3 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white font-semibold rounded-lg transition-all transform hover:scale-105 touch-manipulation"
            >
              ‡§®‡§è ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡§æ‡§è‡§Ç
            </button>
            <button
              onClick={resetQuiz}
              className="w-full py-2 bg-gray-500 hover:bg-gray-600 text-white font-medium rounded-lg transition-colors touch-manipulation"
            >
              ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (triviaQuestions.length === 0) {
    return (
      <div className="w-full max-w-sm mx-auto mt-6 bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-orange-900/20 dark:via-red-900/20 dark:to-pink-900/20 rounded-xl shadow-lg border border-orange-200 dark:border-orange-800 p-4">
        <div className="text-center">
          <h2 className="text-lg font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent mb-3">
            üåç ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§® Quiz
          </h2>
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
            ‡§µ‡§ø‡§∂‡•ç‡§µ ‡§≠‡§∞ ‡§ï‡•á ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§®‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§® ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç!
          </p>
          <button
            onClick={fetchTriviaQuestions}
            className="w-full py-3 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white font-semibold rounded-lg transition-all transform hover:scale-105 touch-manipulation"
          >
            Quiz ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
          </button>
        </div>
      </div>
    );
  }

  const questionData = getCurrentQuestionData();
  if (!questionData) return null;

  return (
    <div className="w-full max-w-sm mx-auto mt-6 bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-orange-900/20 dark:via-red-900/20 dark:to-pink-900/20 rounded-xl shadow-lg border border-orange-200 dark:border-orange-800 p-4">
      <div className="text-center mb-4">
        <h2 className="text-lg font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent mb-2">
          üåç ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§® Quiz
        </h2>
        <div className="text-sm text-gray-600 dark:text-gray-400">
          ‡§™‡•ç‡§∞‡§∂‡•ç‡§® {currentQuestion + 1} / {triviaQuestions.length}
        </div>
        <div className={`text-xs font-medium ${getDifficultyColor(questionData.difficulty)}`}>
          Difficulty: {questionData.difficulty.toUpperCase()}
        </div>
      </div>

      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 mb-4 border border-gray-200 dark:border-gray-700">
        <h3 className="text-base font-semibold text-gray-800 dark:text-gray-200 mb-4 text-center leading-relaxed">
          {questionData.question}
        </h3>

        <div className="space-y-2">
          {questionData.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(index)}
              disabled={selectedAnswer !== null}
              className={`w-full p-3 text-left rounded-lg border transition-all touch-manipulation ${
                selectedAnswer === null
                  ? 'border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 hover:bg-orange-50 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300'
                  : selectedAnswer === index
                  ? index === questionData.correctAnswer
                    ? 'border-green-500 bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200'
                    : 'border-red-500 bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-200'
                  : index === questionData.correctAnswer
                  ? 'border-green-500 bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200'
                  : 'border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400'
              }`}
            >
              <span className="font-medium">{String.fromCharCode(65 + index)}.</span> {option}
            </button>
          ))}
        </div>
      </div>

      {selectedAnswer !== null && (
        <button
          onClick={handleNextQuestion}
          className="w-full py-3 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white font-semibold rounded-lg transition-all transform hover:scale-105 touch-manipulation"
        >
          {currentQuestion < triviaQuestions.length - 1 ? '‡§Ö‡§ó‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®' : '‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç'}
        </button>
      )}
    </div>
  );
}

function QuizSection() {
  return (
    <div className="space-y-0">
      <CommunityQuiz />
      <TriviaQuiz />
    </div>
  );
}

export default QuizSection;